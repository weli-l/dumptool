/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: trace.proto */

#ifndef PROTOBUF_C_trace_2eproto__INCLUDED
#define PROTOBUF_C_trace_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct StackFrame StackFrame;
typedef struct Arguments Arguments;
typedef struct Event Event;
typedef struct TraceData TraceData;
typedef struct TraceData__StackFramesEntry TraceData__StackFramesEntry;


/* --- enums --- */


/* --- messages --- */

struct  StackFrame
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *category;
  /*
   * proto3中parent是optional类型，不需要显式声明
   */
  char *parent;
};
#define STACK_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stack_frame__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Arguments
{
  ProtobufCMessage base;
  int32_t count;
  char *thread_name;
  size_t n_futex_top;
  char **futex_top;
  char *event_type;
};
#define ARGUMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arguments__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


struct  Event
{
  ProtobufCMessage base;
  char *name;
  char *cat;
  uint32_t pid;
  uint32_t tid;
  uint64_t ts;
  uint64_t dur;
  char *track;
  Arguments *args;
  size_t n_stack_frames;
  StackFrame **stack_frames;
};
#define EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, NULL, 0,NULL }


struct  TraceData__StackFramesEntry
{
  ProtobufCMessage base;
  char *key;
  StackFrame *value;
};
#define TRACE_DATA__STACK_FRAMES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trace_data__stack_frames_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  TraceData
{
  ProtobufCMessage base;
  size_t n_trace_events;
  Event **trace_events;
  size_t n_stack_frames;
  TraceData__StackFramesEntry **stack_frames;
  size_t n_samples;
  char **samples;
};
#define TRACE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trace_data__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


/* StackFrame methods */
void   stack_frame__init
                     (StackFrame         *message);
size_t stack_frame__get_packed_size
                     (const StackFrame   *message);
size_t stack_frame__pack
                     (const StackFrame   *message,
                      uint8_t             *out);
size_t stack_frame__pack_to_buffer
                     (const StackFrame   *message,
                      ProtobufCBuffer     *buffer);
StackFrame *
       stack_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stack_frame__free_unpacked
                     (StackFrame *message,
                      ProtobufCAllocator *allocator);
/* Arguments methods */
void   arguments__init
                     (Arguments         *message);
size_t arguments__get_packed_size
                     (const Arguments   *message);
size_t arguments__pack
                     (const Arguments   *message,
                      uint8_t             *out);
size_t arguments__pack_to_buffer
                     (const Arguments   *message,
                      ProtobufCBuffer     *buffer);
Arguments *
       arguments__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arguments__free_unpacked
                     (Arguments *message,
                      ProtobufCAllocator *allocator);
/* Event methods */
void   event__init
                     (Event         *message);
size_t event__get_packed_size
                     (const Event   *message);
size_t event__pack
                     (const Event   *message,
                      uint8_t             *out);
size_t event__pack_to_buffer
                     (const Event   *message,
                      ProtobufCBuffer     *buffer);
Event *
       event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event__free_unpacked
                     (Event *message,
                      ProtobufCAllocator *allocator);
/* TraceData__StackFramesEntry methods */
void   trace_data__stack_frames_entry__init
                     (TraceData__StackFramesEntry         *message);
/* TraceData methods */
void   trace_data__init
                     (TraceData         *message);
size_t trace_data__get_packed_size
                     (const TraceData   *message);
size_t trace_data__pack
                     (const TraceData   *message,
                      uint8_t             *out);
size_t trace_data__pack_to_buffer
                     (const TraceData   *message,
                      ProtobufCBuffer     *buffer);
TraceData *
       trace_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trace_data__free_unpacked
                     (TraceData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*StackFrame_Closure)
                 (const StackFrame *message,
                  void *closure_data);
typedef void (*Arguments_Closure)
                 (const Arguments *message,
                  void *closure_data);
typedef void (*Event_Closure)
                 (const Event *message,
                  void *closure_data);
typedef void (*TraceData__StackFramesEntry_Closure)
                 (const TraceData__StackFramesEntry *message,
                  void *closure_data);
typedef void (*TraceData_Closure)
                 (const TraceData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor stack_frame__descriptor;
extern const ProtobufCMessageDescriptor arguments__descriptor;
extern const ProtobufCMessageDescriptor event__descriptor;
extern const ProtobufCMessageDescriptor trace_data__descriptor;
extern const ProtobufCMessageDescriptor trace_data__stack_frames_entry__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_trace_2eproto__INCLUDED */
