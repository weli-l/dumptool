// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: trace.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_trace_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_trace_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_trace_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_trace_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_trace_2eproto;
class Arguments;
struct ArgumentsDefaultTypeInternal;
extern ArgumentsDefaultTypeInternal _Arguments_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class StackFrame;
struct StackFrameDefaultTypeInternal;
extern StackFrameDefaultTypeInternal _StackFrame_default_instance_;
class TraceData;
struct TraceDataDefaultTypeInternal;
extern TraceDataDefaultTypeInternal _TraceData_default_instance_;
class TraceData_StackFramesEntry_DoNotUse;
struct TraceData_StackFramesEntry_DoNotUseDefaultTypeInternal;
extern TraceData_StackFramesEntry_DoNotUseDefaultTypeInternal _TraceData_StackFramesEntry_DoNotUse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class StackFrame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:StackFrame) */ {
 public:
  inline StackFrame() : StackFrame(nullptr) {}
  ~StackFrame() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StackFrame(
      ::google::protobuf::internal::ConstantInitialized);

  inline StackFrame(const StackFrame& from) : StackFrame(nullptr, from) {}
  inline StackFrame(StackFrame&& from) noexcept
      : StackFrame(nullptr, std::move(from)) {}
  inline StackFrame& operator=(const StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackFrame& operator=(StackFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StackFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackFrame*>(
        &_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StackFrame& a, StackFrame& b) { a.Swap(&b); }
  inline void Swap(StackFrame* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StackFrame* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StackFrame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StackFrame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StackFrame& from) { StackFrame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StackFrame* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "StackFrame"; }

 protected:
  explicit StackFrame(::google::protobuf::Arena* arena);
  StackFrame(::google::protobuf::Arena* arena, const StackFrame& from);
  StackFrame(::google::protobuf::Arena* arena, StackFrame&& from) noexcept
      : StackFrame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCategoryFieldNumber = 3,
    kParentFieldNumber = 4,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string category = 3;
  void clear_category() ;
  const std::string& category() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_category(Arg_&& arg, Args_... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* value);

  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(
      const std::string& value);
  std::string* _internal_mutable_category();

  public:
  // string parent = 4;
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // @@protoc_insertion_point(class_scope:StackFrame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StackFrame_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StackFrame& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr category_;
    ::google::protobuf::internal::ArenaStringPtr parent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class Arguments final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Arguments) */ {
 public:
  inline Arguments() : Arguments(nullptr) {}
  ~Arguments() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Arguments(
      ::google::protobuf::internal::ConstantInitialized);

  inline Arguments(const Arguments& from) : Arguments(nullptr, from) {}
  inline Arguments(Arguments&& from) noexcept
      : Arguments(nullptr, std::move(from)) {}
  inline Arguments& operator=(const Arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline Arguments& operator=(Arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const Arguments* internal_default_instance() {
    return reinterpret_cast<const Arguments*>(
        &_Arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Arguments& a, Arguments& b) { a.Swap(&b); }
  inline void Swap(Arguments* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Arguments* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Arguments* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Arguments>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Arguments& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Arguments& from) { Arguments::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Arguments* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Arguments"; }

 protected:
  explicit Arguments(::google::protobuf::Arena* arena);
  Arguments(::google::protobuf::Arena* arena, const Arguments& from);
  Arguments(::google::protobuf::Arena* arena, Arguments&& from) noexcept
      : Arguments(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFutexTopFieldNumber = 3,
    kThreadNameFieldNumber = 2,
    kEventTypeFieldNumber = 4,
    kCountFieldNumber = 1,
  };
  // repeated string futex_top = 3;
  int futex_top_size() const;
  private:
  int _internal_futex_top_size() const;

  public:
  void clear_futex_top() ;
  const std::string& futex_top(int index) const;
  std::string* mutable_futex_top(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_futex_top(int index, Arg_&& value, Args_... args);
  std::string* add_futex_top();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_futex_top(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& futex_top() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_futex_top();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_futex_top() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_futex_top();

  public:
  // string thread_name = 2;
  void clear_thread_name() ;
  const std::string& thread_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_thread_name(Arg_&& arg, Args_... args);
  std::string* mutable_thread_name();
  PROTOBUF_NODISCARD std::string* release_thread_name();
  void set_allocated_thread_name(std::string* value);

  private:
  const std::string& _internal_thread_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thread_name(
      const std::string& value);
  std::string* _internal_mutable_thread_name();

  public:
  // string event_type = 4;
  void clear_event_type() ;
  const std::string& event_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_type(Arg_&& arg, Args_... args);
  std::string* mutable_event_type();
  PROTOBUF_NODISCARD std::string* release_event_type();
  void set_allocated_event_type(std::string* value);

  private:
  const std::string& _internal_event_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_type(
      const std::string& value);
  std::string* _internal_mutable_event_type();

  public:
  // int32 count = 1;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Arguments)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Arguments_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Arguments& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> futex_top_;
    ::google::protobuf::internal::ArenaStringPtr thread_name_;
    ::google::protobuf::internal::ArenaStringPtr event_type_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class TraceData_StackFramesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          TraceData_StackFramesEntry_DoNotUse, std::string, ::StackFrame,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      TraceData_StackFramesEntry_DoNotUse, std::string, ::StackFrame,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  TraceData_StackFramesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TraceData_StackFramesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TraceData_StackFramesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TraceData_StackFramesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TraceData_StackFramesEntry_DoNotUse*>(
        &_TraceData_StackFramesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      38, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Event* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStackFramesFieldNumber = 9,
    kNameFieldNumber = 1,
    kCatFieldNumber = 2,
    kTrackFieldNumber = 7,
    kArgsFieldNumber = 8,
    kPidFieldNumber = 3,
    kTidFieldNumber = 4,
    kTsFieldNumber = 5,
    kDurFieldNumber = 6,
  };
  // repeated .StackFrame stack_frames = 9;
  int stack_frames_size() const;
  private:
  int _internal_stack_frames_size() const;

  public:
  void clear_stack_frames() ;
  ::StackFrame* mutable_stack_frames(int index);
  ::google::protobuf::RepeatedPtrField<::StackFrame>* mutable_stack_frames();

  private:
  const ::google::protobuf::RepeatedPtrField<::StackFrame>& _internal_stack_frames() const;
  ::google::protobuf::RepeatedPtrField<::StackFrame>* _internal_mutable_stack_frames();
  public:
  const ::StackFrame& stack_frames(int index) const;
  ::StackFrame* add_stack_frames();
  const ::google::protobuf::RepeatedPtrField<::StackFrame>& stack_frames() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string cat = 2;
  void clear_cat() ;
  const std::string& cat() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cat(Arg_&& arg, Args_... args);
  std::string* mutable_cat();
  PROTOBUF_NODISCARD std::string* release_cat();
  void set_allocated_cat(std::string* value);

  private:
  const std::string& _internal_cat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cat(
      const std::string& value);
  std::string* _internal_mutable_cat();

  public:
  // string track = 7;
  void clear_track() ;
  const std::string& track() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_track(Arg_&& arg, Args_... args);
  std::string* mutable_track();
  PROTOBUF_NODISCARD std::string* release_track();
  void set_allocated_track(std::string* value);

  private:
  const std::string& _internal_track() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_track(
      const std::string& value);
  std::string* _internal_mutable_track();

  public:
  // .Arguments args = 8;
  bool has_args() const;
  void clear_args() ;
  const ::Arguments& args() const;
  PROTOBUF_NODISCARD ::Arguments* release_args();
  ::Arguments* mutable_args();
  void set_allocated_args(::Arguments* value);
  void unsafe_arena_set_allocated_args(::Arguments* value);
  ::Arguments* unsafe_arena_release_args();

  private:
  const ::Arguments& _internal_args() const;
  ::Arguments* _internal_mutable_args();

  public:
  // uint32 pid = 3;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // uint32 tid = 4;
  void clear_tid() ;
  ::uint32_t tid() const;
  void set_tid(::uint32_t value);

  private:
  ::uint32_t _internal_tid() const;
  void _internal_set_tid(::uint32_t value);

  public:
  // uint64 ts = 5;
  void clear_ts() ;
  ::uint64_t ts() const;
  void set_ts(::uint64_t value);

  private:
  ::uint64_t _internal_ts() const;
  void _internal_set_ts(::uint64_t value);

  public:
  // uint64 dur = 6;
  void clear_dur() ;
  ::uint64_t dur() const;
  void set_dur(::uint64_t value);

  private:
  ::uint64_t _internal_dur() const;
  void _internal_set_dur(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      34, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Event_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Event& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::StackFrame > stack_frames_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr cat_;
    ::google::protobuf::internal::ArenaStringPtr track_;
    ::Arguments* args_;
    ::uint32_t pid_;
    ::uint32_t tid_;
    ::uint64_t ts_;
    ::uint64_t dur_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class TraceData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TraceData) */ {
 public:
  inline TraceData() : TraceData(nullptr) {}
  ~TraceData() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TraceData(
      ::google::protobuf::internal::ConstantInitialized);

  inline TraceData(const TraceData& from) : TraceData(nullptr, from) {}
  inline TraceData(TraceData&& from) noexcept
      : TraceData(nullptr, std::move(from)) {}
  inline TraceData& operator=(const TraceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceData& operator=(TraceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceData* internal_default_instance() {
    return reinterpret_cast<const TraceData*>(
        &_TraceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TraceData& a, TraceData& b) { a.Swap(&b); }
  inline void Swap(TraceData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceData* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TraceData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TraceData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TraceData& from) { TraceData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TraceData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "TraceData"; }

 protected:
  explicit TraceData(::google::protobuf::Arena* arena);
  TraceData(::google::protobuf::Arena* arena, const TraceData& from);
  TraceData(::google::protobuf::Arena* arena, TraceData&& from) noexcept
      : TraceData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTraceEventsFieldNumber = 1,
    kStackFramesFieldNumber = 2,
    kSamplesFieldNumber = 3,
  };
  // repeated .Event trace_events = 1;
  int trace_events_size() const;
  private:
  int _internal_trace_events_size() const;

  public:
  void clear_trace_events() ;
  ::Event* mutable_trace_events(int index);
  ::google::protobuf::RepeatedPtrField<::Event>* mutable_trace_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::Event>& _internal_trace_events() const;
  ::google::protobuf::RepeatedPtrField<::Event>* _internal_mutable_trace_events();
  public:
  const ::Event& trace_events(int index) const;
  ::Event* add_trace_events();
  const ::google::protobuf::RepeatedPtrField<::Event>& trace_events() const;
  // map<string, .StackFrame> stack_frames = 2;
  int stack_frames_size() const;
  private:
  int _internal_stack_frames_size() const;

  public:
  void clear_stack_frames() ;
  const ::google::protobuf::Map<std::string, ::StackFrame>& stack_frames() const;
  ::google::protobuf::Map<std::string, ::StackFrame>* mutable_stack_frames();

  private:
  const ::google::protobuf::Map<std::string, ::StackFrame>& _internal_stack_frames() const;
  ::google::protobuf::Map<std::string, ::StackFrame>* _internal_mutable_stack_frames();

  public:
  // repeated string samples = 3;
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  const std::string& samples(int index) const;
  std::string* mutable_samples(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_samples(int index, Arg_&& value, Args_... args);
  std::string* add_samples();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_samples(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& samples() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_samples();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_samples() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_samples();

  public:
  // @@protoc_insertion_point(class_scope:TraceData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TraceData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TraceData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Event > trace_events_;
    ::google::protobuf::internal::MapField<TraceData_StackFramesEntry_DoNotUse, std::string, ::StackFrame,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        stack_frames_;
    ::google::protobuf::RepeatedPtrField<std::string> samples_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StackFrame

// string id = 1;
inline void StackFrame::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& StackFrame::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StackFrame.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StackFrame::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StackFrame.id)
}
inline std::string* StackFrame::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:StackFrame.id)
  return _s;
}
inline const std::string& StackFrame::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void StackFrame::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* StackFrame::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* StackFrame::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StackFrame.id)
  return _impl_.id_.Release();
}
inline void StackFrame::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StackFrame.id)
}

// string name = 2;
inline void StackFrame::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StackFrame::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StackFrame.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StackFrame::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StackFrame.name)
}
inline std::string* StackFrame::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:StackFrame.name)
  return _s;
}
inline const std::string& StackFrame::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StackFrame::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StackFrame::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StackFrame::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StackFrame.name)
  return _impl_.name_.Release();
}
inline void StackFrame::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StackFrame.name)
}

// string category = 3;
inline void StackFrame::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.ClearToEmpty();
}
inline const std::string& StackFrame::category() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StackFrame.category)
  return _internal_category();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StackFrame::set_category(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StackFrame.category)
}
inline std::string* StackFrame::mutable_category() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:StackFrame.category)
  return _s;
}
inline const std::string& StackFrame::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.category_.Get();
}
inline void StackFrame::_internal_set_category(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.Set(value, GetArena());
}
inline std::string* StackFrame::_internal_mutable_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.category_.Mutable( GetArena());
}
inline std::string* StackFrame::release_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StackFrame.category)
  return _impl_.category_.Release();
}
inline void StackFrame::set_allocated_category(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.category_.IsDefault()) {
          _impl_.category_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StackFrame.category)
}

// string parent = 4;
inline void StackFrame::clear_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& StackFrame::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StackFrame.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StackFrame::set_parent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StackFrame.parent)
}
inline std::string* StackFrame::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:StackFrame.parent)
  return _s;
}
inline const std::string& StackFrame::_internal_parent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_.Get();
}
inline void StackFrame::_internal_set_parent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* StackFrame::_internal_mutable_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* StackFrame::release_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StackFrame.parent)
  return _impl_.parent_.Release();
}
inline void StackFrame::set_allocated_parent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StackFrame.parent)
}

// -------------------------------------------------------------------

// Arguments

// int32 count = 1;
inline void Arguments::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
}
inline ::int32_t Arguments::count() const {
  // @@protoc_insertion_point(field_get:Arguments.count)
  return _internal_count();
}
inline void Arguments::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Arguments.count)
}
inline ::int32_t Arguments::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void Arguments::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// string thread_name = 2;
inline void Arguments::clear_thread_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thread_name_.ClearToEmpty();
}
inline const std::string& Arguments::thread_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Arguments.thread_name)
  return _internal_thread_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Arguments::set_thread_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thread_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Arguments.thread_name)
}
inline std::string* Arguments::mutable_thread_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_thread_name();
  // @@protoc_insertion_point(field_mutable:Arguments.thread_name)
  return _s;
}
inline const std::string& Arguments::_internal_thread_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thread_name_.Get();
}
inline void Arguments::_internal_set_thread_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thread_name_.Set(value, GetArena());
}
inline std::string* Arguments::_internal_mutable_thread_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.thread_name_.Mutable( GetArena());
}
inline std::string* Arguments::release_thread_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Arguments.thread_name)
  return _impl_.thread_name_.Release();
}
inline void Arguments::set_allocated_thread_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thread_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.thread_name_.IsDefault()) {
          _impl_.thread_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Arguments.thread_name)
}

// repeated string futex_top = 3;
inline int Arguments::_internal_futex_top_size() const {
  return _internal_futex_top().size();
}
inline int Arguments::futex_top_size() const {
  return _internal_futex_top_size();
}
inline void Arguments::clear_futex_top() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.futex_top_.Clear();
}
inline std::string* Arguments::add_futex_top() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_futex_top()->Add();
  // @@protoc_insertion_point(field_add_mutable:Arguments.futex_top)
  return _s;
}
inline const std::string& Arguments::futex_top(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Arguments.futex_top)
  return _internal_futex_top().Get(index);
}
inline std::string* Arguments::mutable_futex_top(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Arguments.futex_top)
  return _internal_mutable_futex_top()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Arguments::set_futex_top(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_futex_top()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:Arguments.futex_top)
}
template <typename Arg_, typename... Args_>
inline void Arguments::add_futex_top(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_futex_top(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:Arguments.futex_top)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Arguments::futex_top() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Arguments.futex_top)
  return _internal_futex_top();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Arguments::mutable_futex_top() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Arguments.futex_top)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_futex_top();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Arguments::_internal_futex_top() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.futex_top_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Arguments::_internal_mutable_futex_top() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.futex_top_;
}

// string event_type = 4;
inline void Arguments::clear_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_.ClearToEmpty();
}
inline const std::string& Arguments::event_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Arguments.event_type)
  return _internal_event_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Arguments::set_event_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Arguments.event_type)
}
inline std::string* Arguments::mutable_event_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_type();
  // @@protoc_insertion_point(field_mutable:Arguments.event_type)
  return _s;
}
inline const std::string& Arguments::_internal_event_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_type_.Get();
}
inline void Arguments::_internal_set_event_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_.Set(value, GetArena());
}
inline std::string* Arguments::_internal_mutable_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_type_.Mutable( GetArena());
}
inline std::string* Arguments::release_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Arguments.event_type)
  return _impl_.event_type_.Release();
}
inline void Arguments::set_allocated_event_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.event_type_.IsDefault()) {
          _impl_.event_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Arguments.event_type)
}

// -------------------------------------------------------------------

// Event

// string name = 1;
inline void Event::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Event::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Event.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Event.name)
}
inline std::string* Event::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Event.name)
  return _s;
}
inline const std::string& Event::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Event::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Event::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Event.name)
  return _impl_.name_.Release();
}
inline void Event::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Event.name)
}

// string cat = 2;
inline void Event::clear_cat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cat_.ClearToEmpty();
}
inline const std::string& Event::cat() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Event.cat)
  return _internal_cat();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_cat(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cat_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Event.cat)
}
inline std::string* Event::mutable_cat() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cat();
  // @@protoc_insertion_point(field_mutable:Event.cat)
  return _s;
}
inline const std::string& Event::_internal_cat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cat_.Get();
}
inline void Event::_internal_set_cat(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cat_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_cat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cat_.Mutable( GetArena());
}
inline std::string* Event::release_cat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Event.cat)
  return _impl_.cat_.Release();
}
inline void Event::set_allocated_cat(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cat_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cat_.IsDefault()) {
          _impl_.cat_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Event.cat)
}

// uint32 pid = 3;
inline void Event::clear_pid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = 0u;
}
inline ::uint32_t Event::pid() const {
  // @@protoc_insertion_point(field_get:Event.pid)
  return _internal_pid();
}
inline void Event::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Event.pid)
}
inline ::uint32_t Event::_internal_pid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pid_;
}
inline void Event::_internal_set_pid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = value;
}

// uint32 tid = 4;
inline void Event::clear_tid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tid_ = 0u;
}
inline ::uint32_t Event::tid() const {
  // @@protoc_insertion_point(field_get:Event.tid)
  return _internal_tid();
}
inline void Event::set_tid(::uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:Event.tid)
}
inline ::uint32_t Event::_internal_tid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tid_;
}
inline void Event::_internal_set_tid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tid_ = value;
}

// uint64 ts = 5;
inline void Event::clear_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = ::uint64_t{0u};
}
inline ::uint64_t Event::ts() const {
  // @@protoc_insertion_point(field_get:Event.ts)
  return _internal_ts();
}
inline void Event::set_ts(::uint64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:Event.ts)
}
inline ::uint64_t Event::_internal_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ts_;
}
inline void Event::_internal_set_ts(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = value;
}

// uint64 dur = 6;
inline void Event::clear_dur() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dur_ = ::uint64_t{0u};
}
inline ::uint64_t Event::dur() const {
  // @@protoc_insertion_point(field_get:Event.dur)
  return _internal_dur();
}
inline void Event::set_dur(::uint64_t value) {
  _internal_set_dur(value);
  // @@protoc_insertion_point(field_set:Event.dur)
}
inline ::uint64_t Event::_internal_dur() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dur_;
}
inline void Event::_internal_set_dur(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dur_ = value;
}

// string track = 7;
inline void Event::clear_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.track_.ClearToEmpty();
}
inline const std::string& Event::track() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Event.track)
  return _internal_track();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_track(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.track_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Event.track)
}
inline std::string* Event::mutable_track() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_track();
  // @@protoc_insertion_point(field_mutable:Event.track)
  return _s;
}
inline const std::string& Event::_internal_track() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.track_.Get();
}
inline void Event::_internal_set_track(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.track_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.track_.Mutable( GetArena());
}
inline std::string* Event::release_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Event.track)
  return _impl_.track_.Release();
}
inline void Event::set_allocated_track(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.track_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.track_.IsDefault()) {
          _impl_.track_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Event.track)
}

// .Arguments args = 8;
inline bool Event::has_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.args_ != nullptr);
  return value;
}
inline void Event::clear_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.args_ != nullptr) _impl_.args_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Arguments& Event::_internal_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Arguments* p = _impl_.args_;
  return p != nullptr ? *p : reinterpret_cast<const ::Arguments&>(::_Arguments_default_instance_);
}
inline const ::Arguments& Event::args() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Event.args)
  return _internal_args();
}
inline void Event::unsafe_arena_set_allocated_args(::Arguments* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.args_);
  }
  _impl_.args_ = reinterpret_cast<::Arguments*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Event.args)
}
inline ::Arguments* Event::release_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Arguments* released = _impl_.args_;
  _impl_.args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Arguments* Event::unsafe_arena_release_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Event.args)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Arguments* temp = _impl_.args_;
  _impl_.args_ = nullptr;
  return temp;
}
inline ::Arguments* Event::_internal_mutable_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.args_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Arguments>(GetArena());
    _impl_.args_ = reinterpret_cast<::Arguments*>(p);
  }
  return _impl_.args_;
}
inline ::Arguments* Event::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Arguments* _msg = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:Event.args)
  return _msg;
}
inline void Event::set_allocated_args(::Arguments* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.args_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.args_ = reinterpret_cast<::Arguments*>(value);
  // @@protoc_insertion_point(field_set_allocated:Event.args)
}

// repeated .StackFrame stack_frames = 9;
inline int Event::_internal_stack_frames_size() const {
  return _internal_stack_frames().size();
}
inline int Event::stack_frames_size() const {
  return _internal_stack_frames_size();
}
inline void Event::clear_stack_frames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stack_frames_.Clear();
}
inline ::StackFrame* Event::mutable_stack_frames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Event.stack_frames)
  return _internal_mutable_stack_frames()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::StackFrame>* Event::mutable_stack_frames()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Event.stack_frames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_stack_frames();
}
inline const ::StackFrame& Event::stack_frames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Event.stack_frames)
  return _internal_stack_frames().Get(index);
}
inline ::StackFrame* Event::add_stack_frames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::StackFrame* _add = _internal_mutable_stack_frames()->Add();
  // @@protoc_insertion_point(field_add:Event.stack_frames)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::StackFrame>& Event::stack_frames() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Event.stack_frames)
  return _internal_stack_frames();
}
inline const ::google::protobuf::RepeatedPtrField<::StackFrame>&
Event::_internal_stack_frames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stack_frames_;
}
inline ::google::protobuf::RepeatedPtrField<::StackFrame>*
Event::_internal_mutable_stack_frames() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.stack_frames_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TraceData

// repeated .Event trace_events = 1;
inline int TraceData::_internal_trace_events_size() const {
  return _internal_trace_events().size();
}
inline int TraceData::trace_events_size() const {
  return _internal_trace_events_size();
}
inline void TraceData::clear_trace_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_events_.Clear();
}
inline ::Event* TraceData::mutable_trace_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TraceData.trace_events)
  return _internal_mutable_trace_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Event>* TraceData::mutable_trace_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TraceData.trace_events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trace_events();
}
inline const ::Event& TraceData::trace_events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TraceData.trace_events)
  return _internal_trace_events().Get(index);
}
inline ::Event* TraceData::add_trace_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Event* _add = _internal_mutable_trace_events()->Add();
  // @@protoc_insertion_point(field_add:TraceData.trace_events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Event>& TraceData::trace_events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TraceData.trace_events)
  return _internal_trace_events();
}
inline const ::google::protobuf::RepeatedPtrField<::Event>&
TraceData::_internal_trace_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trace_events_;
}
inline ::google::protobuf::RepeatedPtrField<::Event>*
TraceData::_internal_mutable_trace_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trace_events_;
}

// map<string, .StackFrame> stack_frames = 2;
inline int TraceData::_internal_stack_frames_size() const {
  return _internal_stack_frames().size();
}
inline int TraceData::stack_frames_size() const {
  return _internal_stack_frames_size();
}
inline void TraceData::clear_stack_frames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stack_frames_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::StackFrame>& TraceData::_internal_stack_frames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stack_frames_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::StackFrame>& TraceData::stack_frames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:TraceData.stack_frames)
  return _internal_stack_frames();
}
inline ::google::protobuf::Map<std::string, ::StackFrame>* TraceData::_internal_mutable_stack_frames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stack_frames_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::StackFrame>* TraceData::mutable_stack_frames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:TraceData.stack_frames)
  return _internal_mutable_stack_frames();
}

// repeated string samples = 3;
inline int TraceData::_internal_samples_size() const {
  return _internal_samples().size();
}
inline int TraceData::samples_size() const {
  return _internal_samples_size();
}
inline void TraceData::clear_samples() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.samples_.Clear();
}
inline std::string* TraceData::add_samples() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_samples()->Add();
  // @@protoc_insertion_point(field_add_mutable:TraceData.samples)
  return _s;
}
inline const std::string& TraceData::samples(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TraceData.samples)
  return _internal_samples().Get(index);
}
inline std::string* TraceData::mutable_samples(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TraceData.samples)
  return _internal_mutable_samples()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TraceData::set_samples(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_samples()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:TraceData.samples)
}
template <typename Arg_, typename... Args_>
inline void TraceData::add_samples(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_samples(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:TraceData.samples)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TraceData::samples() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TraceData.samples)
  return _internal_samples();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TraceData::mutable_samples() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TraceData.samples)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_samples();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TraceData::_internal_samples() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.samples_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TraceData::_internal_mutable_samples() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.samples_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_trace_2eproto_2epb_2eh
