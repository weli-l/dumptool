/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: systrace.proto */

#ifndef PROTOBUF_C_systrace_2eproto__INCLUDED
#define PROTOBUF_C_systrace_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Systrace__Hook__StackFrame Systrace__Hook__StackFrame;
typedef struct Systrace__Hook__MemAllocEntry Systrace__Hook__MemAllocEntry;
typedef struct Systrace__Hook__MemFreeEntry Systrace__Hook__MemFreeEntry;
typedef struct Systrace__Hook__ProcMem Systrace__Hook__ProcMem;
typedef struct Systrace__Hook__GcDebugData Systrace__Hook__GcDebugData;
typedef struct Systrace__Hook__PytorchStage Systrace__Hook__PytorchStage;
typedef struct Systrace__Hook__Pytorch Systrace__Hook__Pytorch;
typedef struct Systrace__Hook__Mem Systrace__Hook__Mem;


/* --- enums --- */

typedef enum _Systrace__Hook__StageType {
  SYSTRACE__HOOK__STAGE_TYPE__STAGE_DATALOADER = 0,
  SYSTRACE__HOOK__STAGE_TYPE__STAGE_FORWARD = 1,
  SYSTRACE__HOOK__STAGE_TYPE__STAGE_BACKWARD = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYSTRACE__HOOK__STAGE_TYPE)
} Systrace__Hook__StageType;

/* --- messages --- */

struct  Systrace__Hook__StackFrame
{
  ProtobufCMessage base;
  uint64_t address;
  char *so_name;
};
#define SYSTRACE__HOOK__STACK_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__stack_frame__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  Systrace__Hook__MemAllocEntry
{
  ProtobufCMessage base;
  uint64_t alloc_ptr;
  uint32_t stage_id;
  Systrace__Hook__StageType stage_type;
  uint64_t mem_size;
  size_t n_stack_frames;
  Systrace__Hook__StackFrame **stack_frames;
};
#define SYSTRACE__HOOK__MEM_ALLOC_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__mem_alloc_entry__descriptor) \
    , 0, 0, SYSTRACE__HOOK__STAGE_TYPE__STAGE_DATALOADER, 0, 0,NULL }


struct  Systrace__Hook__MemFreeEntry
{
  ProtobufCMessage base;
  uint64_t alloc_ptr;
};
#define SYSTRACE__HOOK__MEM_FREE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__mem_free_entry__descriptor) \
    , 0 }


struct  Systrace__Hook__ProcMem
{
  ProtobufCMessage base;
  uint32_t pid;
  size_t n_mem_alloc_stacks;
  Systrace__Hook__MemAllocEntry **mem_alloc_stacks;
  size_t n_mem_free_stacks;
  Systrace__Hook__MemFreeEntry **mem_free_stacks;
};
#define SYSTRACE__HOOK__PROC_MEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__proc_mem__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  Systrace__Hook__GcDebugData
{
  ProtobufCMessage base;
  uint32_t collected;
  uint32_t uncollectable;
};
#define SYSTRACE__HOOK__GC_DEBUG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__gc_debug_data__descriptor) \
    , 0, 0 }


typedef enum {
  SYSTRACE__HOOK__PYTORCH_STAGE__DEBUG_DATA__NOT_SET = 0,
  SYSTRACE__HOOK__PYTORCH_STAGE__DEBUG_DATA_GC_DEBUG = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYSTRACE__HOOK__PYTORCH_STAGE__DEBUG_DATA__CASE)
} Systrace__Hook__PytorchStage__DebugDataCase;

struct  Systrace__Hook__PytorchStage
{
  ProtobufCMessage base;
  uint32_t stage_id;
  char *stage_type;
  uint64_t start_us;
  uint64_t end_us;
  size_t n_stack_frames;
  char **stack_frames;
  Systrace__Hook__PytorchStage__DebugDataCase debug_data_case;
  union {
    Systrace__Hook__GcDebugData *gc_debug;
  };
};
#define SYSTRACE__HOOK__PYTORCH_STAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__pytorch_stage__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, SYSTRACE__HOOK__PYTORCH_STAGE__DEBUG_DATA__NOT_SET, {0} }


struct  Systrace__Hook__Pytorch
{
  ProtobufCMessage base;
  size_t n_pytorch_stages;
  Systrace__Hook__PytorchStage **pytorch_stages;
  uint32_t rank;
  uint32_t step_id;
  /*
   *任务名
   */
  char *comm;
};
#define SYSTRACE__HOOK__PYTORCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__pytorch__descriptor) \
    , 0,NULL, 0, 0, (char *)protobuf_c_empty_string }


struct  Systrace__Hook__Mem
{
  ProtobufCMessage base;
  size_t n_proc_mem;
  Systrace__Hook__ProcMem **proc_mem;
};
#define SYSTRACE__HOOK__MEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&systrace__hook__mem__descriptor) \
    , 0,NULL }


/* Systrace__Hook__StackFrame methods */
void   systrace__hook__stack_frame__init
                     (Systrace__Hook__StackFrame         *message);
size_t systrace__hook__stack_frame__get_packed_size
                     (const Systrace__Hook__StackFrame   *message);
size_t systrace__hook__stack_frame__pack
                     (const Systrace__Hook__StackFrame   *message,
                      uint8_t             *out);
size_t systrace__hook__stack_frame__pack_to_buffer
                     (const Systrace__Hook__StackFrame   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__StackFrame *
       systrace__hook__stack_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__stack_frame__free_unpacked
                     (Systrace__Hook__StackFrame *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__MemAllocEntry methods */
void   systrace__hook__mem_alloc_entry__init
                     (Systrace__Hook__MemAllocEntry         *message);
size_t systrace__hook__mem_alloc_entry__get_packed_size
                     (const Systrace__Hook__MemAllocEntry   *message);
size_t systrace__hook__mem_alloc_entry__pack
                     (const Systrace__Hook__MemAllocEntry   *message,
                      uint8_t             *out);
size_t systrace__hook__mem_alloc_entry__pack_to_buffer
                     (const Systrace__Hook__MemAllocEntry   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__MemAllocEntry *
       systrace__hook__mem_alloc_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__mem_alloc_entry__free_unpacked
                     (Systrace__Hook__MemAllocEntry *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__MemFreeEntry methods */
void   systrace__hook__mem_free_entry__init
                     (Systrace__Hook__MemFreeEntry         *message);
size_t systrace__hook__mem_free_entry__get_packed_size
                     (const Systrace__Hook__MemFreeEntry   *message);
size_t systrace__hook__mem_free_entry__pack
                     (const Systrace__Hook__MemFreeEntry   *message,
                      uint8_t             *out);
size_t systrace__hook__mem_free_entry__pack_to_buffer
                     (const Systrace__Hook__MemFreeEntry   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__MemFreeEntry *
       systrace__hook__mem_free_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__mem_free_entry__free_unpacked
                     (Systrace__Hook__MemFreeEntry *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__ProcMem methods */
void   systrace__hook__proc_mem__init
                     (Systrace__Hook__ProcMem         *message);
size_t systrace__hook__proc_mem__get_packed_size
                     (const Systrace__Hook__ProcMem   *message);
size_t systrace__hook__proc_mem__pack
                     (const Systrace__Hook__ProcMem   *message,
                      uint8_t             *out);
size_t systrace__hook__proc_mem__pack_to_buffer
                     (const Systrace__Hook__ProcMem   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__ProcMem *
       systrace__hook__proc_mem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__proc_mem__free_unpacked
                     (Systrace__Hook__ProcMem *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__GcDebugData methods */
void   systrace__hook__gc_debug_data__init
                     (Systrace__Hook__GcDebugData         *message);
size_t systrace__hook__gc_debug_data__get_packed_size
                     (const Systrace__Hook__GcDebugData   *message);
size_t systrace__hook__gc_debug_data__pack
                     (const Systrace__Hook__GcDebugData   *message,
                      uint8_t             *out);
size_t systrace__hook__gc_debug_data__pack_to_buffer
                     (const Systrace__Hook__GcDebugData   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__GcDebugData *
       systrace__hook__gc_debug_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__gc_debug_data__free_unpacked
                     (Systrace__Hook__GcDebugData *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__PytorchStage methods */
void   systrace__hook__pytorch_stage__init
                     (Systrace__Hook__PytorchStage         *message);
size_t systrace__hook__pytorch_stage__get_packed_size
                     (const Systrace__Hook__PytorchStage   *message);
size_t systrace__hook__pytorch_stage__pack
                     (const Systrace__Hook__PytorchStage   *message,
                      uint8_t             *out);
size_t systrace__hook__pytorch_stage__pack_to_buffer
                     (const Systrace__Hook__PytorchStage   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__PytorchStage *
       systrace__hook__pytorch_stage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__pytorch_stage__free_unpacked
                     (Systrace__Hook__PytorchStage *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__Pytorch methods */
void   systrace__hook__pytorch__init
                     (Systrace__Hook__Pytorch         *message);
size_t systrace__hook__pytorch__get_packed_size
                     (const Systrace__Hook__Pytorch   *message);
size_t systrace__hook__pytorch__pack
                     (const Systrace__Hook__Pytorch   *message,
                      uint8_t             *out);
size_t systrace__hook__pytorch__pack_to_buffer
                     (const Systrace__Hook__Pytorch   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__Pytorch *
       systrace__hook__pytorch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__pytorch__free_unpacked
                     (Systrace__Hook__Pytorch *message,
                      ProtobufCAllocator *allocator);
/* Systrace__Hook__Mem methods */
void   systrace__hook__mem__init
                     (Systrace__Hook__Mem         *message);
size_t systrace__hook__mem__get_packed_size
                     (const Systrace__Hook__Mem   *message);
size_t systrace__hook__mem__pack
                     (const Systrace__Hook__Mem   *message,
                      uint8_t             *out);
size_t systrace__hook__mem__pack_to_buffer
                     (const Systrace__Hook__Mem   *message,
                      ProtobufCBuffer     *buffer);
Systrace__Hook__Mem *
       systrace__hook__mem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   systrace__hook__mem__free_unpacked
                     (Systrace__Hook__Mem *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Systrace__Hook__StackFrame_Closure)
                 (const Systrace__Hook__StackFrame *message,
                  void *closure_data);
typedef void (*Systrace__Hook__MemAllocEntry_Closure)
                 (const Systrace__Hook__MemAllocEntry *message,
                  void *closure_data);
typedef void (*Systrace__Hook__MemFreeEntry_Closure)
                 (const Systrace__Hook__MemFreeEntry *message,
                  void *closure_data);
typedef void (*Systrace__Hook__ProcMem_Closure)
                 (const Systrace__Hook__ProcMem *message,
                  void *closure_data);
typedef void (*Systrace__Hook__GcDebugData_Closure)
                 (const Systrace__Hook__GcDebugData *message,
                  void *closure_data);
typedef void (*Systrace__Hook__PytorchStage_Closure)
                 (const Systrace__Hook__PytorchStage *message,
                  void *closure_data);
typedef void (*Systrace__Hook__Pytorch_Closure)
                 (const Systrace__Hook__Pytorch *message,
                  void *closure_data);
typedef void (*Systrace__Hook__Mem_Closure)
                 (const Systrace__Hook__Mem *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    systrace__hook__stage_type__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__stack_frame__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__mem_alloc_entry__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__mem_free_entry__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__proc_mem__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__gc_debug_data__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__pytorch_stage__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__pytorch__descriptor;
extern const ProtobufCMessageDescriptor systrace__hook__mem__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_systrace_2eproto__INCLUDED */
