/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: systrace.proto */

#ifndef PROTOBUF_C_systrace_2eproto__INCLUDED
#define PROTOBUF_C_systrace_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct StackFrame StackFrame;
typedef struct MemAllocEntry MemAllocEntry;
typedef struct MemFreeEntry MemFreeEntry;
typedef struct ProcMem ProcMem;
typedef struct GcDebugData GcDebugData;
typedef struct PytorchStage PytorchStage;
typedef struct Pytorch Pytorch;
typedef struct Mem Mem;


/* --- enums --- */

typedef enum _StageType {
  STAGE_TYPE__STAGE_DATALOADER = 0,
  STAGE_TYPE__STAGE_FORWARD = 1,
  STAGE_TYPE__STAGE_BACKWARD = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STAGE_TYPE)
} StageType;

/* --- messages --- */

struct  StackFrame
{
  ProtobufCMessage base;
  uint64_t address;
  char *so_name;
};
#define STACK_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stack_frame__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  MemAllocEntry
{
  ProtobufCMessage base;
  uint64_t alloc_ptr;
  uint32_t stage_id;
  StageType stage_type;
  uint64_t mem_size;
  size_t n_stack_frames;
  StackFrame **stack_frames;
};
#define MEM_ALLOC_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mem_alloc_entry__descriptor) \
    , 0, 0, STAGE_TYPE__STAGE_DATALOADER, 0, 0,NULL }


struct  MemFreeEntry
{
  ProtobufCMessage base;
  uint64_t alloc_ptr;
};
#define MEM_FREE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mem_free_entry__descriptor) \
    , 0 }


struct  ProcMem
{
  ProtobufCMessage base;
  uint32_t pid;
  size_t n_mem_alloc_stacks;
  MemAllocEntry **mem_alloc_stacks;
  size_t n_mem_free_stacks;
  MemFreeEntry **mem_free_stacks;
};
#define PROC_MEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proc_mem__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  GcDebugData
{
  ProtobufCMessage base;
  uint32_t collected;
  uint32_t uncollectable;
};
#define GC_DEBUG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gc_debug_data__descriptor) \
    , 0, 0 }


typedef enum {
  PYTORCH_STAGE__DEBUG_DATA__NOT_SET = 0,
  PYTORCH_STAGE__DEBUG_DATA_GC_DEBUG = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PYTORCH_STAGE__DEBUG_DATA__CASE)
} PytorchStage__DebugDataCase;

struct  PytorchStage
{
  ProtobufCMessage base;
  uint32_t stage_id;
  char *stage_type;
  uint64_t start_us;
  uint64_t end_us;
  size_t n_stack_frames;
  char **stack_frames;
  PytorchStage__DebugDataCase debug_data_case;
  union {
    GcDebugData *gc_debug;
  };
};
#define PYTORCH_STAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pytorch_stage__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, PYTORCH_STAGE__DEBUG_DATA__NOT_SET, {0} }


struct  Pytorch
{
  ProtobufCMessage base;
  size_t n_pytorch_stages;
  PytorchStage **pytorch_stages;
  uint32_t rank;
  uint32_t step_id;
  /*
   *任务名
   */
  char *comm;
};
#define PYTORCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pytorch__descriptor) \
    , 0,NULL, 0, 0, (char *)protobuf_c_empty_string }


struct  Mem
{
  ProtobufCMessage base;
  size_t n_proc_mem;
  ProcMem **proc_mem;
};
#define MEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mem__descriptor) \
    , 0,NULL }


/* StackFrame methods */
void   stack_frame__init
                     (StackFrame         *message);
size_t stack_frame__get_packed_size
                     (const StackFrame   *message);
size_t stack_frame__pack
                     (const StackFrame   *message,
                      uint8_t             *out);
size_t stack_frame__pack_to_buffer
                     (const StackFrame   *message,
                      ProtobufCBuffer     *buffer);
StackFrame *
       stack_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stack_frame__free_unpacked
                     (StackFrame *message,
                      ProtobufCAllocator *allocator);
/* MemAllocEntry methods */
void   mem_alloc_entry__init
                     (MemAllocEntry         *message);
size_t mem_alloc_entry__get_packed_size
                     (const MemAllocEntry   *message);
size_t mem_alloc_entry__pack
                     (const MemAllocEntry   *message,
                      uint8_t             *out);
size_t mem_alloc_entry__pack_to_buffer
                     (const MemAllocEntry   *message,
                      ProtobufCBuffer     *buffer);
MemAllocEntry *
       mem_alloc_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mem_alloc_entry__free_unpacked
                     (MemAllocEntry *message,
                      ProtobufCAllocator *allocator);
/* MemFreeEntry methods */
void   mem_free_entry__init
                     (MemFreeEntry         *message);
size_t mem_free_entry__get_packed_size
                     (const MemFreeEntry   *message);
size_t mem_free_entry__pack
                     (const MemFreeEntry   *message,
                      uint8_t             *out);
size_t mem_free_entry__pack_to_buffer
                     (const MemFreeEntry   *message,
                      ProtobufCBuffer     *buffer);
MemFreeEntry *
       mem_free_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mem_free_entry__free_unpacked
                     (MemFreeEntry *message,
                      ProtobufCAllocator *allocator);
/* ProcMem methods */
void   proc_mem__init
                     (ProcMem         *message);
size_t proc_mem__get_packed_size
                     (const ProcMem   *message);
size_t proc_mem__pack
                     (const ProcMem   *message,
                      uint8_t             *out);
size_t proc_mem__pack_to_buffer
                     (const ProcMem   *message,
                      ProtobufCBuffer     *buffer);
ProcMem *
       proc_mem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proc_mem__free_unpacked
                     (ProcMem *message,
                      ProtobufCAllocator *allocator);
/* GcDebugData methods */
void   gc_debug_data__init
                     (GcDebugData         *message);
size_t gc_debug_data__get_packed_size
                     (const GcDebugData   *message);
size_t gc_debug_data__pack
                     (const GcDebugData   *message,
                      uint8_t             *out);
size_t gc_debug_data__pack_to_buffer
                     (const GcDebugData   *message,
                      ProtobufCBuffer     *buffer);
GcDebugData *
       gc_debug_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gc_debug_data__free_unpacked
                     (GcDebugData *message,
                      ProtobufCAllocator *allocator);
/* PytorchStage methods */
void   pytorch_stage__init
                     (PytorchStage         *message);
size_t pytorch_stage__get_packed_size
                     (const PytorchStage   *message);
size_t pytorch_stage__pack
                     (const PytorchStage   *message,
                      uint8_t             *out);
size_t pytorch_stage__pack_to_buffer
                     (const PytorchStage   *message,
                      ProtobufCBuffer     *buffer);
PytorchStage *
       pytorch_stage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pytorch_stage__free_unpacked
                     (PytorchStage *message,
                      ProtobufCAllocator *allocator);
/* Pytorch methods */
void   pytorch__init
                     (Pytorch         *message);
size_t pytorch__get_packed_size
                     (const Pytorch   *message);
size_t pytorch__pack
                     (const Pytorch   *message,
                      uint8_t             *out);
size_t pytorch__pack_to_buffer
                     (const Pytorch   *message,
                      ProtobufCBuffer     *buffer);
Pytorch *
       pytorch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pytorch__free_unpacked
                     (Pytorch *message,
                      ProtobufCAllocator *allocator);
/* Mem methods */
void   mem__init
                     (Mem         *message);
size_t mem__get_packed_size
                     (const Mem   *message);
size_t mem__pack
                     (const Mem   *message,
                      uint8_t             *out);
size_t mem__pack_to_buffer
                     (const Mem   *message,
                      ProtobufCBuffer     *buffer);
Mem *
       mem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mem__free_unpacked
                     (Mem *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*StackFrame_Closure)
                 (const StackFrame *message,
                  void *closure_data);
typedef void (*MemAllocEntry_Closure)
                 (const MemAllocEntry *message,
                  void *closure_data);
typedef void (*MemFreeEntry_Closure)
                 (const MemFreeEntry *message,
                  void *closure_data);
typedef void (*ProcMem_Closure)
                 (const ProcMem *message,
                  void *closure_data);
typedef void (*GcDebugData_Closure)
                 (const GcDebugData *message,
                  void *closure_data);
typedef void (*PytorchStage_Closure)
                 (const PytorchStage *message,
                  void *closure_data);
typedef void (*Pytorch_Closure)
                 (const Pytorch *message,
                  void *closure_data);
typedef void (*Mem_Closure)
                 (const Mem *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    stage_type__descriptor;
extern const ProtobufCMessageDescriptor stack_frame__descriptor;
extern const ProtobufCMessageDescriptor mem_alloc_entry__descriptor;
extern const ProtobufCMessageDescriptor mem_free_entry__descriptor;
extern const ProtobufCMessageDescriptor proc_mem__descriptor;
extern const ProtobufCMessageDescriptor gc_debug_data__descriptor;
extern const ProtobufCMessageDescriptor pytorch_stage__descriptor;
extern const ProtobufCMessageDescriptor pytorch__descriptor;
extern const ProtobufCMessageDescriptor mem__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_systrace_2eproto__INCLUDED */
