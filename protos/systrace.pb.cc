// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: systrace.proto

#include "systrace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace systrace {
namespace hook {
PROTOBUF_CONSTEXPR StackFrame::StackFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.so_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackFrameDefaultTypeInternal() {}
  union {
    StackFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackFrameDefaultTypeInternal _StackFrame_default_instance_;
PROTOBUF_CONSTEXPR MemAllocEntry::MemAllocEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stack_frames_)*/{}
  , /*decltype(_impl_.alloc_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.mem_size_)*/uint64_t{0u}
  , /*decltype(_impl_.stage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemAllocEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemAllocEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemAllocEntryDefaultTypeInternal() {}
  union {
    MemAllocEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemAllocEntryDefaultTypeInternal _MemAllocEntry_default_instance_;
PROTOBUF_CONSTEXPR MemFreeEntry::MemFreeEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alloc_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemFreeEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemFreeEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemFreeEntryDefaultTypeInternal() {}
  union {
    MemFreeEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemFreeEntryDefaultTypeInternal _MemFreeEntry_default_instance_;
PROTOBUF_CONSTEXPR ProcMem::ProcMem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mem_alloc_stacks_)*/{}
  , /*decltype(_impl_.mem_free_stacks_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcMemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcMemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcMemDefaultTypeInternal() {}
  union {
    ProcMem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcMemDefaultTypeInternal _ProcMem_default_instance_;
PROTOBUF_CONSTEXPR GcDebugData::GcDebugData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collected_)*/0u
  , /*decltype(_impl_.uncollectable_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GcDebugDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcDebugDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcDebugDataDefaultTypeInternal() {}
  union {
    GcDebugData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcDebugDataDefaultTypeInternal _GcDebugData_default_instance_;
PROTOBUF_CONSTEXPR PytorchStage::PytorchStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stack_frames_)*/{}
  , /*decltype(_impl_.stage_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_us_)*/uint64_t{0u}
  , /*decltype(_impl_.end_us_)*/uint64_t{0u}
  , /*decltype(_impl_.stage_id_)*/0u
  , /*decltype(_impl_.debug_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PytorchStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PytorchStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PytorchStageDefaultTypeInternal() {}
  union {
    PytorchStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PytorchStageDefaultTypeInternal _PytorchStage_default_instance_;
PROTOBUF_CONSTEXPR Pytorch::Pytorch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pytorch_stages_)*/{}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.step_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PytorchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PytorchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PytorchDefaultTypeInternal() {}
  union {
    Pytorch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PytorchDefaultTypeInternal _Pytorch_default_instance_;
PROTOBUF_CONSTEXPR Mem::Mem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proc_mem_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemDefaultTypeInternal() {}
  union {
    Mem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemDefaultTypeInternal _Mem_default_instance_;
}  // namespace hook
}  // namespace systrace
static ::_pb::Metadata file_level_metadata_systrace_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_systrace_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_systrace_2eproto = nullptr;

const uint32_t TableStruct_systrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::StackFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::StackFrame, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::StackFrame, _impl_.so_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemAllocEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemAllocEntry, _impl_.alloc_ptr_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemAllocEntry, _impl_.stage_id_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemAllocEntry, _impl_.mem_size_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemAllocEntry, _impl_.stack_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemFreeEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::MemFreeEntry, _impl_.alloc_ptr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::ProcMem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::ProcMem, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::ProcMem, _impl_.mem_alloc_stacks_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::ProcMem, _impl_.mem_free_stacks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::GcDebugData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::GcDebugData, _impl_.collected_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::GcDebugData, _impl_.uncollectable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_.stage_id_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_.stage_type_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_.start_us_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_.end_us_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_.stack_frames_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::systrace::hook::PytorchStage, _impl_.debug_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Pytorch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Pytorch, _impl_.pytorch_stages_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Pytorch, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Pytorch, _impl_.step_id_),
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Pytorch, _impl_.comm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Mem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::systrace::hook::Mem, _impl_.proc_mem_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::systrace::hook::StackFrame)},
  { 8, -1, -1, sizeof(::systrace::hook::MemAllocEntry)},
  { 18, -1, -1, sizeof(::systrace::hook::MemFreeEntry)},
  { 25, -1, -1, sizeof(::systrace::hook::ProcMem)},
  { 34, -1, -1, sizeof(::systrace::hook::GcDebugData)},
  { 42, -1, -1, sizeof(::systrace::hook::PytorchStage)},
  { 55, -1, -1, sizeof(::systrace::hook::Pytorch)},
  { 65, -1, -1, sizeof(::systrace::hook::Mem)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::systrace::hook::_StackFrame_default_instance_._instance,
  &::systrace::hook::_MemAllocEntry_default_instance_._instance,
  &::systrace::hook::_MemFreeEntry_default_instance_._instance,
  &::systrace::hook::_ProcMem_default_instance_._instance,
  &::systrace::hook::_GcDebugData_default_instance_._instance,
  &::systrace::hook::_PytorchStage_default_instance_._instance,
  &::systrace::hook::_Pytorch_default_instance_._instance,
  &::systrace::hook::_Mem_default_instance_._instance,
};

const char descriptor_table_protodef_systrace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016systrace.proto\022\rsystrace.hook\".\n\nStack"
  "Frame\022\017\n\007address\030\001 \001(\004\022\017\n\007so_name\030\002 \001(\t\""
  "w\n\rMemAllocEntry\022\021\n\talloc_ptr\030\001 \001(\004\022\020\n\010s"
  "tage_id\030\002 \001(\r\022\020\n\010mem_size\030\003 \001(\004\022/\n\014stack"
  "_frames\030\004 \003(\0132\031.systrace.hook.StackFrame"
  "\"!\n\014MemFreeEntry\022\021\n\talloc_ptr\030\001 \001(\004\"\204\001\n\007"
  "ProcMem\022\013\n\003pid\030\001 \001(\r\0226\n\020mem_alloc_stacks"
  "\030\002 \003(\0132\034.systrace.hook.MemAllocEntry\0224\n\017"
  "mem_free_stacks\030\003 \003(\0132\033.systrace.hook.Me"
  "mFreeEntry\"7\n\013GcDebugData\022\021\n\tcollected\030\001"
  " \001(\r\022\025\n\runcollectable\030\002 \001(\r\"\252\001\n\014PytorchS"
  "tage\022\020\n\010stage_id\030\001 \001(\r\022\022\n\nstage_type\030\002 \001"
  "(\t\022\020\n\010start_us\030\003 \001(\004\022\016\n\006end_us\030\004 \001(\004\022\024\n\014"
  "stack_frames\030\005 \003(\t\022.\n\010gc_debug\030\006 \001(\0132\032.s"
  "ystrace.hook.GcDebugDataH\000B\014\n\ndebug_data"
  "\"k\n\007Pytorch\0223\n\016pytorch_stages\030\001 \003(\0132\033.sy"
  "strace.hook.PytorchStage\022\014\n\004rank\030\002 \001(\r\022\017"
  "\n\007step_id\030\003 \001(\r\022\014\n\004comm\030\004 \001(\t\"/\n\003Mem\022(\n\010"
  "proc_mem\030\001 \003(\0132\026.systrace.hook.ProcMem*H"
  "\n\tStageType\022\024\n\020STAGE_DATALOADER\020\000\022\021\n\rSTA"
  "GE_FORWARD\020\001\022\022\n\016STAGE_BACKWARD\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_systrace_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_systrace_2eproto = {
    false, false, 840, descriptor_table_protodef_systrace_2eproto,
    "systrace.proto",
    &descriptor_table_systrace_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_systrace_2eproto::offsets,
    file_level_metadata_systrace_2eproto, file_level_enum_descriptors_systrace_2eproto,
    file_level_service_descriptors_systrace_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_systrace_2eproto_getter() {
  return &descriptor_table_systrace_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_systrace_2eproto(&descriptor_table_systrace_2eproto);
namespace systrace {
namespace hook {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_systrace_2eproto);
  return file_level_enum_descriptors_systrace_2eproto[0];
}
bool StageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StackFrame::_Internal {
 public:
};

StackFrame::StackFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.StackFrame)
}
StackFrame::StackFrame(const StackFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.so_name_){}
    , decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.so_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.so_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_so_name().empty()) {
    _this->_impl_.so_name_.Set(from._internal_so_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.address_ = from._impl_.address_;
  // @@protoc_insertion_point(copy_constructor:systrace.hook.StackFrame)
}

inline void StackFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.so_name_){}
    , decltype(_impl_.address_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.so_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.so_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StackFrame::~StackFrame() {
  // @@protoc_insertion_point(destructor:systrace.hook.StackFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.so_name_.Destroy();
}

void StackFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.StackFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.so_name_.ClearToEmpty();
  _impl_.address_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string so_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_so_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "systrace.hook.StackFrame.so_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.StackFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(), target);
  }

  // string so_name = 2;
  if (!this->_internal_so_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_so_name().data(), static_cast<int>(this->_internal_so_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "systrace.hook.StackFrame.so_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_so_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.StackFrame)
  return target;
}

size_t StackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.StackFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string so_name = 2;
  if (!this->_internal_so_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_so_name());
  }

  // uint64 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackFrame::GetClassData() const { return &_class_data_; }


void StackFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackFrame*>(&to_msg);
  auto& from = static_cast<const StackFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.StackFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_so_name().empty()) {
    _this->_internal_set_so_name(from._internal_so_name());
  }
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackFrame::CopyFrom(const StackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrame::IsInitialized() const {
  return true;
}

void StackFrame::InternalSwap(StackFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.so_name_, lhs_arena,
      &other->_impl_.so_name_, rhs_arena
  );
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StackFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[0]);
}

// ===================================================================

class MemAllocEntry::_Internal {
 public:
};

MemAllocEntry::MemAllocEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.MemAllocEntry)
}
MemAllocEntry::MemAllocEntry(const MemAllocEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemAllocEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_frames_){from._impl_.stack_frames_}
    , decltype(_impl_.alloc_ptr_){}
    , decltype(_impl_.mem_size_){}
    , decltype(_impl_.stage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.alloc_ptr_, &from._impl_.alloc_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stage_id_) -
    reinterpret_cast<char*>(&_impl_.alloc_ptr_)) + sizeof(_impl_.stage_id_));
  // @@protoc_insertion_point(copy_constructor:systrace.hook.MemAllocEntry)
}

inline void MemAllocEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_frames_){arena}
    , decltype(_impl_.alloc_ptr_){uint64_t{0u}}
    , decltype(_impl_.mem_size_){uint64_t{0u}}
    , decltype(_impl_.stage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemAllocEntry::~MemAllocEntry() {
  // @@protoc_insertion_point(destructor:systrace.hook.MemAllocEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemAllocEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_frames_.~RepeatedPtrField();
}

void MemAllocEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemAllocEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.MemAllocEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_frames_.Clear();
  ::memset(&_impl_.alloc_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stage_id_) -
      reinterpret_cast<char*>(&_impl_.alloc_ptr_)) + sizeof(_impl_.stage_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemAllocEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 alloc_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.alloc_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mem_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .systrace.hook.StackFrame stack_frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemAllocEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.MemAllocEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 alloc_ptr = 1;
  if (this->_internal_alloc_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_alloc_ptr(), target);
  }

  // uint32 stage_id = 2;
  if (this->_internal_stage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stage_id(), target);
  }

  // uint64 mem_size = 3;
  if (this->_internal_mem_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_mem_size(), target);
  }

  // repeated .systrace.hook.StackFrame stack_frames = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stack_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_stack_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.MemAllocEntry)
  return target;
}

size_t MemAllocEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.MemAllocEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .systrace.hook.StackFrame stack_frames = 4;
  total_size += 1UL * this->_internal_stack_frames_size();
  for (const auto& msg : this->_impl_.stack_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 alloc_ptr = 1;
  if (this->_internal_alloc_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_alloc_ptr());
  }

  // uint64 mem_size = 3;
  if (this->_internal_mem_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mem_size());
  }

  // uint32 stage_id = 2;
  if (this->_internal_stage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemAllocEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemAllocEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemAllocEntry::GetClassData() const { return &_class_data_; }


void MemAllocEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemAllocEntry*>(&to_msg);
  auto& from = static_cast<const MemAllocEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.MemAllocEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_frames_.MergeFrom(from._impl_.stack_frames_);
  if (from._internal_alloc_ptr() != 0) {
    _this->_internal_set_alloc_ptr(from._internal_alloc_ptr());
  }
  if (from._internal_mem_size() != 0) {
    _this->_internal_set_mem_size(from._internal_mem_size());
  }
  if (from._internal_stage_id() != 0) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemAllocEntry::CopyFrom(const MemAllocEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.MemAllocEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemAllocEntry::IsInitialized() const {
  return true;
}

void MemAllocEntry::InternalSwap(MemAllocEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stack_frames_.InternalSwap(&other->_impl_.stack_frames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemAllocEntry, _impl_.stage_id_)
      + sizeof(MemAllocEntry::_impl_.stage_id_)
      - PROTOBUF_FIELD_OFFSET(MemAllocEntry, _impl_.alloc_ptr_)>(
          reinterpret_cast<char*>(&_impl_.alloc_ptr_),
          reinterpret_cast<char*>(&other->_impl_.alloc_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemAllocEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[1]);
}

// ===================================================================

class MemFreeEntry::_Internal {
 public:
};

MemFreeEntry::MemFreeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.MemFreeEntry)
}
MemFreeEntry::MemFreeEntry(const MemFreeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemFreeEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alloc_ptr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.alloc_ptr_ = from._impl_.alloc_ptr_;
  // @@protoc_insertion_point(copy_constructor:systrace.hook.MemFreeEntry)
}

inline void MemFreeEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alloc_ptr_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemFreeEntry::~MemFreeEntry() {
  // @@protoc_insertion_point(destructor:systrace.hook.MemFreeEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemFreeEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemFreeEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemFreeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.MemFreeEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alloc_ptr_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemFreeEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 alloc_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.alloc_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemFreeEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.MemFreeEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 alloc_ptr = 1;
  if (this->_internal_alloc_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_alloc_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.MemFreeEntry)
  return target;
}

size_t MemFreeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.MemFreeEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 alloc_ptr = 1;
  if (this->_internal_alloc_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_alloc_ptr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemFreeEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemFreeEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemFreeEntry::GetClassData() const { return &_class_data_; }


void MemFreeEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemFreeEntry*>(&to_msg);
  auto& from = static_cast<const MemFreeEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.MemFreeEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_alloc_ptr() != 0) {
    _this->_internal_set_alloc_ptr(from._internal_alloc_ptr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemFreeEntry::CopyFrom(const MemFreeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.MemFreeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemFreeEntry::IsInitialized() const {
  return true;
}

void MemFreeEntry::InternalSwap(MemFreeEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.alloc_ptr_, other->_impl_.alloc_ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemFreeEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[2]);
}

// ===================================================================

class ProcMem::_Internal {
 public:
};

ProcMem::ProcMem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.ProcMem)
}
ProcMem::ProcMem(const ProcMem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcMem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mem_alloc_stacks_){from._impl_.mem_alloc_stacks_}
    , decltype(_impl_.mem_free_stacks_){from._impl_.mem_free_stacks_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:systrace.hook.ProcMem)
}

inline void ProcMem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mem_alloc_stacks_){arena}
    , decltype(_impl_.mem_free_stacks_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcMem::~ProcMem() {
  // @@protoc_insertion_point(destructor:systrace.hook.ProcMem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcMem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mem_alloc_stacks_.~RepeatedPtrField();
  _impl_.mem_free_stacks_.~RepeatedPtrField();
}

void ProcMem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcMem::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.ProcMem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mem_alloc_stacks_.Clear();
  _impl_.mem_free_stacks_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcMem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .systrace.hook.MemAllocEntry mem_alloc_stacks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mem_alloc_stacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .systrace.hook.MemFreeEntry mem_free_stacks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mem_free_stacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcMem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.ProcMem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .systrace.hook.MemAllocEntry mem_alloc_stacks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mem_alloc_stacks_size()); i < n; i++) {
    const auto& repfield = this->_internal_mem_alloc_stacks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .systrace.hook.MemFreeEntry mem_free_stacks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mem_free_stacks_size()); i < n; i++) {
    const auto& repfield = this->_internal_mem_free_stacks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.ProcMem)
  return target;
}

size_t ProcMem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.ProcMem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .systrace.hook.MemAllocEntry mem_alloc_stacks = 2;
  total_size += 1UL * this->_internal_mem_alloc_stacks_size();
  for (const auto& msg : this->_impl_.mem_alloc_stacks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .systrace.hook.MemFreeEntry mem_free_stacks = 3;
  total_size += 1UL * this->_internal_mem_free_stacks_size();
  for (const auto& msg : this->_impl_.mem_free_stacks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcMem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcMem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcMem::GetClassData() const { return &_class_data_; }


void ProcMem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcMem*>(&to_msg);
  auto& from = static_cast<const ProcMem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.ProcMem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mem_alloc_stacks_.MergeFrom(from._impl_.mem_alloc_stacks_);
  _this->_impl_.mem_free_stacks_.MergeFrom(from._impl_.mem_free_stacks_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcMem::CopyFrom(const ProcMem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.ProcMem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcMem::IsInitialized() const {
  return true;
}

void ProcMem::InternalSwap(ProcMem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mem_alloc_stacks_.InternalSwap(&other->_impl_.mem_alloc_stacks_);
  _impl_.mem_free_stacks_.InternalSwap(&other->_impl_.mem_free_stacks_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcMem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[3]);
}

// ===================================================================

class GcDebugData::_Internal {
 public:
};

GcDebugData::GcDebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.GcDebugData)
}
GcDebugData::GcDebugData(const GcDebugData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcDebugData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collected_){}
    , decltype(_impl_.uncollectable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.collected_, &from._impl_.collected_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uncollectable_) -
    reinterpret_cast<char*>(&_impl_.collected_)) + sizeof(_impl_.uncollectable_));
  // @@protoc_insertion_point(copy_constructor:systrace.hook.GcDebugData)
}

inline void GcDebugData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collected_){0u}
    , decltype(_impl_.uncollectable_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GcDebugData::~GcDebugData() {
  // @@protoc_insertion_point(destructor:systrace.hook.GcDebugData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcDebugData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GcDebugData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcDebugData::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.GcDebugData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.collected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uncollectable_) -
      reinterpret_cast<char*>(&_impl_.collected_)) + sizeof(_impl_.uncollectable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcDebugData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 collected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uncollectable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uncollectable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcDebugData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.GcDebugData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 collected = 1;
  if (this->_internal_collected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_collected(), target);
  }

  // uint32 uncollectable = 2;
  if (this->_internal_uncollectable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uncollectable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.GcDebugData)
  return target;
}

size_t GcDebugData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.GcDebugData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 collected = 1;
  if (this->_internal_collected() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_collected());
  }

  // uint32 uncollectable = 2;
  if (this->_internal_uncollectable() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uncollectable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcDebugData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcDebugData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcDebugData::GetClassData() const { return &_class_data_; }


void GcDebugData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcDebugData*>(&to_msg);
  auto& from = static_cast<const GcDebugData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.GcDebugData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_collected() != 0) {
    _this->_internal_set_collected(from._internal_collected());
  }
  if (from._internal_uncollectable() != 0) {
    _this->_internal_set_uncollectable(from._internal_uncollectable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcDebugData::CopyFrom(const GcDebugData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.GcDebugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcDebugData::IsInitialized() const {
  return true;
}

void GcDebugData::InternalSwap(GcDebugData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcDebugData, _impl_.uncollectable_)
      + sizeof(GcDebugData::_impl_.uncollectable_)
      - PROTOBUF_FIELD_OFFSET(GcDebugData, _impl_.collected_)>(
          reinterpret_cast<char*>(&_impl_.collected_),
          reinterpret_cast<char*>(&other->_impl_.collected_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GcDebugData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[4]);
}

// ===================================================================

class PytorchStage::_Internal {
 public:
  static const ::systrace::hook::GcDebugData& gc_debug(const PytorchStage* msg);
};

const ::systrace::hook::GcDebugData&
PytorchStage::_Internal::gc_debug(const PytorchStage* msg) {
  return *msg->_impl_.debug_data_.gc_debug_;
}
void PytorchStage::set_allocated_gc_debug(::systrace::hook::GcDebugData* gc_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_debug_data();
  if (gc_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gc_debug);
    if (message_arena != submessage_arena) {
      gc_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gc_debug, submessage_arena);
    }
    set_has_gc_debug();
    _impl_.debug_data_.gc_debug_ = gc_debug;
  }
  // @@protoc_insertion_point(field_set_allocated:systrace.hook.PytorchStage.gc_debug)
}
PytorchStage::PytorchStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.PytorchStage)
}
PytorchStage::PytorchStage(const PytorchStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PytorchStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_frames_){from._impl_.stack_frames_}
    , decltype(_impl_.stage_type_){}
    , decltype(_impl_.start_us_){}
    , decltype(_impl_.end_us_){}
    , decltype(_impl_.stage_id_){}
    , decltype(_impl_.debug_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stage_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_type().empty()) {
    _this->_impl_.stage_type_.Set(from._internal_stage_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_us_, &from._impl_.start_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stage_id_) -
    reinterpret_cast<char*>(&_impl_.start_us_)) + sizeof(_impl_.stage_id_));
  clear_has_debug_data();
  switch (from.debug_data_case()) {
    case kGcDebug: {
      _this->_internal_mutable_gc_debug()->::systrace::hook::GcDebugData::MergeFrom(
          from._internal_gc_debug());
      break;
    }
    case DEBUG_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:systrace.hook.PytorchStage)
}

inline void PytorchStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_frames_){arena}
    , decltype(_impl_.stage_type_){}
    , decltype(_impl_.start_us_){uint64_t{0u}}
    , decltype(_impl_.end_us_){uint64_t{0u}}
    , decltype(_impl_.stage_id_){0u}
    , decltype(_impl_.debug_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.stage_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_debug_data();
}

PytorchStage::~PytorchStage() {
  // @@protoc_insertion_point(destructor:systrace.hook.PytorchStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PytorchStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_frames_.~RepeatedPtrField();
  _impl_.stage_type_.Destroy();
  if (has_debug_data()) {
    clear_debug_data();
  }
}

void PytorchStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PytorchStage::clear_debug_data() {
// @@protoc_insertion_point(one_of_clear_start:systrace.hook.PytorchStage)
  switch (debug_data_case()) {
    case kGcDebug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.debug_data_.gc_debug_;
      }
      break;
    }
    case DEBUG_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEBUG_DATA_NOT_SET;
}


void PytorchStage::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.PytorchStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_frames_.Clear();
  _impl_.stage_type_.ClearToEmpty();
  ::memset(&_impl_.start_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stage_id_) -
      reinterpret_cast<char*>(&_impl_.start_us_)) + sizeof(_impl_.stage_id_));
  clear_debug_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PytorchStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stage_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stage_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "systrace.hook.PytorchStage.stage_type"));
        } else
          goto handle_unusual;
        continue;
      // uint64 start_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.end_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stack_frames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack_frames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "systrace.hook.PytorchStage.stack_frames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .systrace.hook.GcDebugData gc_debug = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gc_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PytorchStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.PytorchStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_id = 1;
  if (this->_internal_stage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stage_id(), target);
  }

  // string stage_type = 2;
  if (!this->_internal_stage_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_type().data(), static_cast<int>(this->_internal_stage_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "systrace.hook.PytorchStage.stage_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stage_type(), target);
  }

  // uint64 start_us = 3;
  if (this->_internal_start_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_us(), target);
  }

  // uint64 end_us = 4;
  if (this->_internal_end_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end_us(), target);
  }

  // repeated string stack_frames = 5;
  for (int i = 0, n = this->_internal_stack_frames_size(); i < n; i++) {
    const auto& s = this->_internal_stack_frames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "systrace.hook.PytorchStage.stack_frames");
    target = stream->WriteString(5, s, target);
  }

  // .systrace.hook.GcDebugData gc_debug = 6;
  if (_internal_has_gc_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gc_debug(this),
        _Internal::gc_debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.PytorchStage)
  return target;
}

size_t PytorchStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.PytorchStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack_frames = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stack_frames_.size());
  for (int i = 0, n = _impl_.stack_frames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stack_frames_.Get(i));
  }

  // string stage_type = 2;
  if (!this->_internal_stage_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_type());
  }

  // uint64 start_us = 3;
  if (this->_internal_start_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_us());
  }

  // uint64 end_us = 4;
  if (this->_internal_end_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_us());
  }

  // uint32 stage_id = 1;
  if (this->_internal_stage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stage_id());
  }

  switch (debug_data_case()) {
    // .systrace.hook.GcDebugData gc_debug = 6;
    case kGcDebug: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.debug_data_.gc_debug_);
      break;
    }
    case DEBUG_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PytorchStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PytorchStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PytorchStage::GetClassData() const { return &_class_data_; }


void PytorchStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PytorchStage*>(&to_msg);
  auto& from = static_cast<const PytorchStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.PytorchStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_frames_.MergeFrom(from._impl_.stack_frames_);
  if (!from._internal_stage_type().empty()) {
    _this->_internal_set_stage_type(from._internal_stage_type());
  }
  if (from._internal_start_us() != 0) {
    _this->_internal_set_start_us(from._internal_start_us());
  }
  if (from._internal_end_us() != 0) {
    _this->_internal_set_end_us(from._internal_end_us());
  }
  if (from._internal_stage_id() != 0) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  switch (from.debug_data_case()) {
    case kGcDebug: {
      _this->_internal_mutable_gc_debug()->::systrace::hook::GcDebugData::MergeFrom(
          from._internal_gc_debug());
      break;
    }
    case DEBUG_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PytorchStage::CopyFrom(const PytorchStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.PytorchStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PytorchStage::IsInitialized() const {
  return true;
}

void PytorchStage::InternalSwap(PytorchStage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stack_frames_.InternalSwap(&other->_impl_.stack_frames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_type_, lhs_arena,
      &other->_impl_.stage_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PytorchStage, _impl_.stage_id_)
      + sizeof(PytorchStage::_impl_.stage_id_)
      - PROTOBUF_FIELD_OFFSET(PytorchStage, _impl_.start_us_)>(
          reinterpret_cast<char*>(&_impl_.start_us_),
          reinterpret_cast<char*>(&other->_impl_.start_us_));
  swap(_impl_.debug_data_, other->_impl_.debug_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PytorchStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[5]);
}

// ===================================================================

class Pytorch::_Internal {
 public:
};

Pytorch::Pytorch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.Pytorch)
}
Pytorch::Pytorch(const Pytorch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pytorch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pytorch_stages_){from._impl_.pytorch_stages_}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.step_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comm().empty()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_id_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.step_id_));
  // @@protoc_insertion_point(copy_constructor:systrace.hook.Pytorch)
}

inline void Pytorch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pytorch_stages_){arena}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.step_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pytorch::~Pytorch() {
  // @@protoc_insertion_point(destructor:systrace.hook.Pytorch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pytorch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pytorch_stages_.~RepeatedPtrField();
  _impl_.comm_.Destroy();
}

void Pytorch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pytorch::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.Pytorch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pytorch_stages_.Clear();
  _impl_.comm_.ClearToEmpty();
  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_id_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.step_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pytorch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .systrace.hook.PytorchStage pytorch_stages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pytorch_stages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 step_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "systrace.hook.Pytorch.comm"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pytorch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.Pytorch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .systrace.hook.PytorchStage pytorch_stages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pytorch_stages_size()); i < n; i++) {
    const auto& repfield = this->_internal_pytorch_stages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // uint32 step_id = 3;
  if (this->_internal_step_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_step_id(), target);
  }

  // string comm = 4;
  if (!this->_internal_comm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comm().data(), static_cast<int>(this->_internal_comm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "systrace.hook.Pytorch.comm");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.Pytorch)
  return target;
}

size_t Pytorch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.Pytorch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .systrace.hook.PytorchStage pytorch_stages = 1;
  total_size += 1UL * this->_internal_pytorch_stages_size();
  for (const auto& msg : this->_impl_.pytorch_stages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string comm = 4;
  if (!this->_internal_comm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comm());
  }

  // uint32 rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  // uint32 step_id = 3;
  if (this->_internal_step_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_step_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pytorch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pytorch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pytorch::GetClassData() const { return &_class_data_; }


void Pytorch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pytorch*>(&to_msg);
  auto& from = static_cast<const Pytorch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.Pytorch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pytorch_stages_.MergeFrom(from._impl_.pytorch_stages_);
  if (!from._internal_comm().empty()) {
    _this->_internal_set_comm(from._internal_comm());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_step_id() != 0) {
    _this->_internal_set_step_id(from._internal_step_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pytorch::CopyFrom(const Pytorch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.Pytorch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pytorch::IsInitialized() const {
  return true;
}

void Pytorch::InternalSwap(Pytorch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pytorch_stages_.InternalSwap(&other->_impl_.pytorch_stages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pytorch, _impl_.step_id_)
      + sizeof(Pytorch::_impl_.step_id_)
      - PROTOBUF_FIELD_OFFSET(Pytorch, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pytorch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[6]);
}

// ===================================================================

class Mem::_Internal {
 public:
};

Mem::Mem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:systrace.hook.Mem)
}
Mem::Mem(const Mem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proc_mem_){from._impl_.proc_mem_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:systrace.hook.Mem)
}

inline void Mem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proc_mem_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mem::~Mem() {
  // @@protoc_insertion_point(destructor:systrace.hook.Mem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proc_mem_.~RepeatedPtrField();
}

void Mem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mem::Clear() {
// @@protoc_insertion_point(message_clear_start:systrace.hook.Mem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proc_mem_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .systrace.hook.ProcMem proc_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proc_mem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:systrace.hook.Mem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .systrace.hook.ProcMem proc_mem = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proc_mem_size()); i < n; i++) {
    const auto& repfield = this->_internal_proc_mem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:systrace.hook.Mem)
  return target;
}

size_t Mem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:systrace.hook.Mem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .systrace.hook.ProcMem proc_mem = 1;
  total_size += 1UL * this->_internal_proc_mem_size();
  for (const auto& msg : this->_impl_.proc_mem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mem::GetClassData() const { return &_class_data_; }


void Mem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mem*>(&to_msg);
  auto& from = static_cast<const Mem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:systrace.hook.Mem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.proc_mem_.MergeFrom(from._impl_.proc_mem_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mem::CopyFrom(const Mem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:systrace.hook.Mem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mem::IsInitialized() const {
  return true;
}

void Mem::InternalSwap(Mem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.proc_mem_.InternalSwap(&other->_impl_.proc_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_systrace_2eproto_getter, &descriptor_table_systrace_2eproto_once,
      file_level_metadata_systrace_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hook
}  // namespace systrace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::systrace::hook::StackFrame*
Arena::CreateMaybeMessage< ::systrace::hook::StackFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::StackFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::MemAllocEntry*
Arena::CreateMaybeMessage< ::systrace::hook::MemAllocEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::MemAllocEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::MemFreeEntry*
Arena::CreateMaybeMessage< ::systrace::hook::MemFreeEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::MemFreeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::ProcMem*
Arena::CreateMaybeMessage< ::systrace::hook::ProcMem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::ProcMem >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::GcDebugData*
Arena::CreateMaybeMessage< ::systrace::hook::GcDebugData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::GcDebugData >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::PytorchStage*
Arena::CreateMaybeMessage< ::systrace::hook::PytorchStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::PytorchStage >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::Pytorch*
Arena::CreateMaybeMessage< ::systrace::hook::Pytorch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::Pytorch >(arena);
}
template<> PROTOBUF_NOINLINE ::systrace::hook::Mem*
Arena::CreateMaybeMessage< ::systrace::hook::Mem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::systrace::hook::Mem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
